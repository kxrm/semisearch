name: Auto-merge Solo Development

on:
  workflow_run:
    workflows: ["CI/CD Pipeline"]
    branches: [feature/*, hotfix/*, bugfix/*]
    types: [completed]

jobs:
  auto-merge-solo:
    name: Auto-merge for solo development
    runs-on: ubuntu-latest
    if: |
      github.event.workflow_run.conclusion == 'success' && 
      github.event.workflow_run.actor.login == 'kxrm'
    
    steps:
    - name: Get PR information
      id: get-pr
      uses: actions/github-script@v7
      with:
        script: |
          // Get the PR associated with this workflow run
          const { data: prs } = await github.rest.pulls.list({
            owner: context.repo.owner,
            repo: context.repo.repo,
            head: `${context.repo.owner}:${context.payload.workflow_run.head_branch}`,
            state: 'open'
          });
          
          if (prs.length === 0) {
            console.log('No open PR found for this branch');
            core.setOutput('pr_number', '');
            return;
          }
          
          const pr = prs[0];
          console.log(`Found PR #${pr.number}: ${pr.title}`);
          core.setOutput('pr_number', pr.number.toString());
          core.setOutput('pr_title', pr.title);
          core.setOutput('pr_body', pr.body || '');

    - name: Auto-merge PR
      if: steps.get-pr.outputs.pr_number != ''
      uses: actions/github-script@v7
      env:
        PR_TITLE: ${{ steps.get-pr.outputs.pr_title }}
        PR_BODY: ${{ steps.get-pr.outputs.pr_body }}
      with:
        script: |
          const prNumber = parseInt('${{ steps.get-pr.outputs.pr_number }}');
          const prTitle = process.env.PR_TITLE || 'Auto-merge';
          const prBody = process.env.PR_BODY || 'Auto-merged by workflow';
          
          console.log(`üöÄ CI completed successfully, auto-merging PR #${prNumber}...`);
          
          try {
            await github.rest.pulls.merge({
              owner: context.repo.owner,
              repo: context.repo.repo,
              pull_number: prNumber,
              merge_method: "squash",
              commit_title: `${prTitle} (#${prNumber})`,
              commit_message: prBody
            });
            
            console.log('‚úÖ PR merged successfully');
            
            // Add success comment
            await github.rest.issues.createComment({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: prNumber,
              body: 'ü§ñ **Auto-merged successfully!**\n\n‚úÖ All CI checks passed\n‚úÖ Branch follows naming conventions\n‚úÖ Solo development mode active\n\nSquash-merged to maintain clean commit history.'
            });
            
          } catch (error) {
            console.log('‚ùå Auto-merge failed:', error.message);
            
            // Add failure comment  
            await github.rest.issues.createComment({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: prNumber,
              body: `‚ùå **Auto-merge failed**: ${error.message}\n\nPlease merge manually or check for conflicts.`
            });
            
            throw error;
          }

    - name: Log merge status
      if: always()
      run: |
        echo "=== Solo Auto-merge Status ==="
        echo "Workflow: ${{ github.event.workflow_run.name }}"
        echo "Conclusion: ${{ github.event.workflow_run.conclusion }}"
        echo "Actor: ${{ github.event.workflow_run.actor.login }}"
        echo "Branch: ${{ github.event.workflow_run.head_branch }}"
        echo "PR Number: ${{ steps.get-pr.outputs.pr_number }}"
        echo "===============================" 