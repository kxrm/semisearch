name: Auto-merge Solo Development

on:
  pull_request:
    types: [opened, synchronize, reopened]
  check_suite:
    types: [completed]

jobs:
  auto-merge-solo:
    name: Auto-merge for solo development
    runs-on: ubuntu-latest
    if: github.event.pull_request.draft == false && github.actor == 'kxrm'
    
    steps:
    - name: Check if PR is from feature branch
      id: check-branch
      run: |
        echo "Checking branch eligibility..."
        
        if [[ "${{ github.head_ref }}" == feature/* ]] || [[ "${{ github.head_ref }}" == hotfix/* ]] || [[ "${{ github.head_ref }}" == bugfix/* ]]; then
          echo "‚úÖ PR is from an allowed branch type"
          echo "eligible=true" >> $GITHUB_OUTPUT
        else
          echo "‚ùå PR is not from a feature/hotfix/bugfix branch"
          echo "eligible=false" >> $GITHUB_OUTPUT
        fi

    - name: Wait for all CI checks to complete
      if: steps.check-branch.outputs.eligible == 'true'
      uses: actions/github-script@v7
      id: wait-for-ci
      with:
        script: |
          const maxWaitTime = 30 * 60 * 1000; // 30 minutes
          const pollInterval = 30 * 1000; // 30 seconds
          const startTime = Date.now();
          
          while (Date.now() - startTime < maxWaitTime) {
            const { data: pr } = await github.rest.pulls.get({
              owner: context.repo.owner,
              repo: context.repo.repo,
              pull_number: context.issue.number,
            });
            
            const { data: checks } = await github.rest.checks.listForRef({
              owner: context.repo.owner,
              repo: context.repo.repo,
              ref: pr.head.sha,
            });
            
            const { data: statuses } = await github.rest.repos.listCommitStatusesForRef({
              owner: context.repo.owner,
              repo: context.repo.repo,
              ref: pr.head.sha,
            });
            
            // Check if all checks are completed
            const allChecks = [...checks.check_runs];
            const pendingChecks = allChecks.filter(check => 
              check.status === 'in_progress' || check.status === 'queued'
            );
            
            const failedChecks = allChecks.filter(check => 
              check.conclusion === 'failure' || check.conclusion === 'cancelled'
            );
            
            console.log(`Pending checks: ${pendingChecks.length}, Failed checks: ${failedChecks.length}`);
            
            if (failedChecks.length > 0) {
              console.log('‚ùå Some CI checks failed');
              core.setOutput('conclusion', 'failure');
              return;
            }
            
            if (pendingChecks.length === 0) {
              console.log('‚úÖ All CI checks completed successfully');
              core.setOutput('conclusion', 'success');
              return;
            }
            
            console.log(`‚è≥ Waiting for ${pendingChecks.length} checks to complete...`);
            await new Promise(resolve => setTimeout(resolve, pollInterval));
          }
          
          console.log('‚è∞ Timeout waiting for CI checks');
          core.setOutput('conclusion', 'timeout');

    - name: Auto-merge when CI passes
      if: |
        steps.check-branch.outputs.eligible == 'true' && 
        steps.wait-for-ci.outputs.conclusion == 'success'
      uses: actions/github-script@v7
      with:
        script: |
          console.log('üöÄ CI passed for solo development, auto-merging...');
          
          try {
            await github.rest.pulls.merge({
              owner: context.repo.owner,
              repo: context.repo.repo,
              pull_number: context.issue.number,
              merge_method: "squash",
              commit_title: `${context.payload.pull_request.title} (#${context.issue.number})`,
              commit_message: context.payload.pull_request.body || ''
            });
            
            console.log('‚úÖ PR merged successfully');
            
            // Add success comment
            await github.rest.issues.createComment({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: context.issue.number,
              body: 'ü§ñ **Auto-merged successfully!**\n\n‚úÖ All CI checks passed\n‚úÖ Branch follows naming conventions\n‚úÖ Solo development mode active\n\nSquash-merged to maintain clean commit history.'
            });
            
          } catch (error) {
            console.log('‚ùå Auto-merge failed:', error.message);
            
            // Add failure comment
            await github.rest.issues.createComment({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: context.issue.number,
              body: `‚ùå **Auto-merge failed**: ${error.message}\n\nPlease merge manually or check for conflicts.`
            });
            
            throw error;
          }

    - name: Log merge status
      if: always()
      run: |
        echo "=== Solo Auto-merge Status ==="
        echo "Eligible: ${{ steps.check-branch.outputs.eligible }}"
        echo "CI Status: ${{ steps.wait-for-ci.outputs.conclusion }}"
        echo "Actor: ${{ github.actor }}"
        echo "Branch: ${{ github.head_ref }}"
        echo "==============================" 