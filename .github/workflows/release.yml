name: Release

on:
  push:
    tags:
      - 'v*.*.*'

env:
  CARGO_TERM_COLOR: always

jobs:
  # Create GitHub Release
  create-release:
    name: Create Release
    runs-on: ubuntu-latest
    outputs:
      upload_url: ${{ steps.create_release.outputs.upload_url }}
      version: ${{ steps.get_version.outputs.version }}
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Get version from tag
      id: get_version
      run: echo "version=${GITHUB_REF#refs/tags/v}" >> $GITHUB_OUTPUT

    - name: Create Release
      id: create_release
      uses: actions/create-release@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        tag_name: ${{ github.ref }}
        release_name: semisearch v${{ steps.get_version.outputs.version }}
        body: |
          ## semisearch v${{ steps.get_version.outputs.version }}
          
          ### üöÄ Features
          - Enhanced semantic search capabilities
          - Multi-platform support (Linux, Windows, macOS, ARM64)
          - Privacy-first local processing
          
          ### üì¶ Installation
          
          **Download pre-built binaries:**
          - Linux x64: `semisearch-x86_64-unknown-linux-gnu`
          - Windows x64: `semisearch-x86_64-pc-windows-msvc.exe` 
          - macOS x64: `semisearch-x86_64-apple-darwin`
          - Linux ARM64: `semisearch-aarch64-unknown-linux-gnu`
          
          **Install via Cargo:**
          ```bash
          cargo install semisearch
          ```
          
          ### üîç Quick Start
          ```bash
          # Basic search
          ./semisearch search "TODO" --path ./src
          
          # Fuzzy matching
          ./semisearch search "TOOD" --fuzzy
          
          # JSON output
          ./semisearch search "error" --format json
          ```
          
          ### üìö Documentation
          - [Architecture Plan](docs/SEMANTIC_SEARCH_ARCHITECTURE_PLAN.md)
          - [README](README.md)
          
          **Full Changelog**: https://github.com/${{ github.repository }}/compare/v${{ steps.get_version.outputs.version }}...main
        draft: false
        prerelease: false

  # Build release binaries for multiple platforms
  build-release:
    name: Build Release Binary
    needs: create-release
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        include:
          - os: ubuntu-latest
            target: x86_64-unknown-linux-gnu
            asset_name: semisearch-x86_64-unknown-linux-gnu
          - os: windows-latest
            target: x86_64-pc-windows-msvc
            asset_name: semisearch-x86_64-pc-windows-msvc.exe
          - os: macos-latest
            target: x86_64-apple-darwin
            asset_name: semisearch-x86_64-apple-darwin
          - os: ubuntu-latest
            target: aarch64-unknown-linux-gnu
            asset_name: semisearch-aarch64-unknown-linux-gnu
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Install Rust toolchain
      uses: dtolnay/rust-toolchain@stable
      with:
        targets: ${{ matrix.target }}

    - name: Install cross (for ARM64 Linux)
      if: matrix.target == 'aarch64-unknown-linux-gnu'
      run: cargo install cross

    - name: Build release binary
      run: |
        if [ "${{ matrix.target }}" = "aarch64-unknown-linux-gnu" ]; then
          cross build --release --target ${{ matrix.target }}
        else
          cargo build --release --target ${{ matrix.target }}
        fi

    - name: Prepare binary for upload
      run: |
        if [ "${{ matrix.os }}" = "windows-latest" ]; then
          cp target/${{ matrix.target }}/release/semisearch.exe ${{ matrix.asset_name }}
        else
          cp target/${{ matrix.target }}/release/semisearch ${{ matrix.asset_name }}
        fi

    - name: Upload Release Asset
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ needs.create-release.outputs.upload_url }}
        asset_path: ./${{ matrix.asset_name }}
        asset_name: ${{ matrix.asset_name }}
        asset_content_type: application/octet-stream

  # Publish to crates.io (if CARGO_REGISTRY_TOKEN is set)
  publish-crate:
    name: Publish to crates.io
    needs: [create-release, build-release]
    runs-on: ubuntu-latest
    if: secrets.CARGO_REGISTRY_TOKEN != ''
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Install Rust toolchain
      uses: dtolnay/rust-toolchain@stable

    - name: Publish to crates.io
      run: cargo publish --token ${{ secrets.CARGO_REGISTRY_TOKEN }}

  # Update Homebrew formula (if repository secrets are configured)
  update-homebrew:
    name: Update Homebrew Formula
    needs: [create-release, build-release]
    runs-on: ubuntu-latest
    if: secrets.HOMEBREW_TAP_TOKEN != ''
    
    steps:
    - name: Update Homebrew formula
      run: |
        # This would update a Homebrew tap repository
        # Implementation depends on your Homebrew tap setup
        echo "Homebrew formula update would go here"
        echo "Version: ${{ needs.create-release.outputs.version }}" 