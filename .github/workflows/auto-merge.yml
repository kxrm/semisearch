name: Auto-merge PR (Team Mode - Disabled)

on:
  workflow_dispatch:  # Manual trigger only - disabled for solo development

jobs:
  auto-merge:
    name: Auto-merge approved PRs
    runs-on: ubuntu-latest
    if: github.event.pull_request.draft == false
    
    steps:
    - name: Check if PR is ready for auto-merge
      id: check-ready
      run: |
        echo "Checking auto-merge conditions..."
        
        # Check if PR has auto-merge label or is from a feature branch
        if [[ "${{ github.head_ref }}" == feature/* ]] || [[ "${{ github.head_ref }}" == hotfix/* ]] || [[ "${{ github.head_ref }}" == bugfix/* ]]; then
          echo "‚úÖ PR is from an allowed branch type"
          echo "eligible=true" >> $GITHUB_OUTPUT
        else
          echo "‚ùå PR is not from a feature/hotfix/bugfix branch"
          echo "eligible=false" >> $GITHUB_OUTPUT
        fi

    - name: Wait for CI to complete
      if: steps.check-ready.outputs.eligible == 'true'
      uses: fountainhead/action-wait-for-check@v1.2.0
      id: wait-for-ci
      with:
        token: ${{ secrets.GITHUB_TOKEN }}
        checkName: "CI/CD Pipeline"
        ref: ${{ github.event.pull_request.head.sha }}
        timeoutSeconds: 1800  # 30 minutes max wait

    - name: Check PR approval status
      if: steps.check-ready.outputs.eligible == 'true' && steps.wait-for-ci.outputs.conclusion == 'success'
      id: check-approval
      uses: actions/github-script@v7
      with:
        script: |
          const { data: reviews } = await github.rest.pulls.listReviews({
            owner: context.repo.owner,
            repo: context.repo.repo,
            pull_number: context.issue.number,
          });
          
          const approvals = reviews.filter(review => review.state === 'APPROVED');
          const rejections = reviews.filter(review => review.state === 'CHANGES_REQUESTED');
          
          console.log(`Found ${approvals.length} approvals and ${rejections.length} rejections`);
          
          if (rejections.length > 0) {
            console.log('‚ùå PR has requested changes');
            core.setOutput('approved', 'false');
            return;
          }
          
          if (approvals.length >= 1) {
            console.log('‚úÖ PR has sufficient approvals');
            core.setOutput('approved', 'true');
          } else {
            console.log('‚è≥ PR needs more approvals');
            core.setOutput('approved', 'false');
          }

    - name: Enable auto-merge
      if: |
        steps.check-ready.outputs.eligible == 'true' && 
        steps.wait-for-ci.outputs.conclusion == 'success' && 
        steps.check-approval.outputs.approved == 'true'
      uses: actions/github-script@v7
      with:
        script: |
          console.log('üöÄ All conditions met, enabling auto-merge...');
          
          try {
            await github.rest.pulls.enableAutoMerge({
              owner: context.repo.owner,
              repo: context.repo.repo,
              pull_number: context.issue.number,
              merge_method: "squash"
            });
            
            console.log('‚úÖ Auto-merge enabled successfully');
            
            // Add a comment to the PR
            await github.rest.issues.createComment({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: context.issue.number,
              body: 'ü§ñ **Auto-merge enabled!** This PR will be automatically merged when all conditions are met:\n\n‚úÖ All CI checks passing\n‚úÖ Required approvals received\n‚úÖ No pending changes requested\n\nThe PR will be squash-merged to maintain a clean commit history.'
            });
            
          } catch (error) {
            console.log('‚ùå Failed to enable auto-merge:', error.message);
            
            // Try manual merge as fallback
            try {
              await github.rest.pulls.merge({
                owner: context.repo.owner,
                repo: context.repo.repo,
                pull_number: context.issue.number,
                merge_method: "squash",
                commit_title: `${context.payload.pull_request.title} (#${context.issue.number})`,
                commit_message: context.payload.pull_request.body || ''
              });
              
              console.log('‚úÖ PR merged successfully via fallback method');
            } catch (mergeError) {
              console.log('‚ùå Manual merge also failed:', mergeError.message);
              throw mergeError;
            }
          }

    - name: Log auto-merge status
      if: always()
      run: |
        echo "=== Auto-merge Status Summary ==="
        echo "Eligible: ${{ steps.check-ready.outputs.eligible }}"
        echo "CI Status: ${{ steps.wait-for-ci.outputs.conclusion }}"
        echo "Approved: ${{ steps.check-approval.outputs.approved }}"
        echo "Branch: ${{ github.head_ref }}"
        echo "=================================" 